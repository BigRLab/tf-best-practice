
# basic information for generating and executing this definition
SenzaInfo:
  StackName: query2fdna-learner
  Parameters:
    - ImageVersion:
        Description: "Docker image version of query2sku-learner."
    - ApplicationID:
        Description: "yourturn/kio application id"
        Default: query2fdna-learner
    - Mint:
        Description: "mint bucket"
        Default: zalando-stups-mint-948104835794-eu-west-1
    - Q2SDataBucket:
        Description: "intake: query2sku-data s3 bucket"
        Default: query2fdna-data
    - Q2SLogBucket:
        Description: "log: quer2sku-model s3 bucket"
        Default: query2fdna-log
    - Q2SResultBucket:
        Description: "output: quer2sku-model s3 bucket"
        Default: query2fdna-save
    - SlaveArguments:
        Description: "The arguments to pass to the slave RNN model."
        Default: aws lstm

# a list of senza components to apply to the definition
SenzaComponents:

  # this basic configuration is required for the other components
  - Configuration:
      Type: Senza::StupsAutoConfiguration # auto-detect network setup

  # will create a launch configuration and auto scaling group with scaling triggers
  - AppServer:
      Type: Senza::TaupageAutoScalingGroup
      InstanceType: p2.xlarge
      SpotPrice: 20.0  # its super important for two reasons: 1. cheaper 2 wont block other team member
      HealthCheckType: EC2
      SecurityGroups:
        - app-query2fdna-learner
      IamRoles:
        - Ref: TrainerRole
      AutoScaling:
        Minimum: 1
        Maximum: 1
        DesiredCapacity: 1
      AssociatePublicIpAddress: false # change for standalone deployment in default VPC
      BlockDeviceMappings:
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: "128"
            VolumeType: gp2
      TaupageConfig:
        mounts:
          /opt/workspace:
            partition: /dev/xvdf
            erase_on_boot: true
            filesystem: ext4
        application_version: "{{Arguments.ImageVersion}}"
        runtime: Docker
        root: true
        source: "pierone.stups.zalan.do/deepthought/query2fdna-learner:{{Arguments.ImageVersion}}"
        mint_bucket: "zalando-stups-mint-948104835794-eu-west-1"
        environment:
          ARGUMENTS: "{{Arguments.SlaveArguments}}"
          APPNAME: "{{ SenzaInfo.StackVersion }}-{{Arguments.ImageVersion}}"
        ports:
          8080: 8080
          6006: 6006

Resources:
  TrainerRole:
      Type: AWS::IAM::Role
      Properties:
         AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            -  Effect: Allow
               Principal:
                  Service: ec2.amazonaws.com
               Action: sts:AssumeRole
         Path: /
         Policies:
           -   PolicyName: AmazonS3ReadOnlyAccess
               PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                  -  Effect: Allow
                     Action:
                        - s3:GetObject
                     Resource: arn:aws:s3:::{{Arguments.Mint}}/{{Arguments.ApplicationID}}/*
           -   PolicyName: AccessFilterConfigS3Bucket
               PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                  -  Effect: Allow
                     Action:
                        - s3:GetObject
                     Resource:
                        - "arn:aws:s3:::{{Arguments.Q2SResultBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SResultBucket}}/*"
                        - "arn:aws:s3:::{{Arguments.Q2SDataBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SDataBucket}}/*"
                        - "arn:aws:s3:::{{Arguments.Q2SLogBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SLogBucket}}/*"
                  -  Effect: Allow
                     Action:
                        - s3:ListBucket
                     Resource:
                        - "arn:aws:s3:::{{Arguments.Q2SResultBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SResultBucket}}/*"
                        - "arn:aws:s3:::{{Arguments.Q2SDataBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SDataBucket}}/*"
                        - "arn:aws:s3:::{{Arguments.Q2SLogBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SLogBucket}}/*"
                  -  Effect: Allow
                     Action:
                        - s3:*
                     Resource:
                        - "arn:aws:s3:::{{Arguments.Q2SResultBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SResultBucket}}/*"
                        - "arn:aws:s3:::{{Arguments.Q2SDataBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SDataBucket}}/*"
                        - "arn:aws:s3:::{{Arguments.Q2SLogBucket}}"
                        - "arn:aws:s3:::{{Arguments.Q2SLogBucket}}/*"
           -   PolicyName: CloudWatchLogs
               PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                  -  Effect: Allow
                     Action:
                        - logs:*
                     Resource: "*"